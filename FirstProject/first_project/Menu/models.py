from calendar import weekday
from django.db import models
import uuid  # Importing uuid for generating unique ID

# Create your models here.
# Category model stores different menu categories like starter, main course, etc.
class Category(models.Model):
    # UUID field as primary key for each category, auto-generated by uuid4
    id = models.UUIDField(primary_key = True, default = uuid.uuid4,editable = False) 
    name=models.CharField(max_length=100,null=True,blank=True) # Name of the category, max length is 100, can be null or blank
    description=models.TextField(null=True,blank=True) # Description of the category, can be null or blank
    def __str__(self): # String representation of the model
        return f'{self.name}====={self.id}' # Returns the category name and its UUID
    

# Assuming Category and Weekday models are defined somewhere in your project

class MenuItem(models.Model):
    # Fields for MenuItem
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)  # UUID as primary key
    name = models.CharField(max_length=100, null=True, blank=True)  # Menu item name
    description = models.TextField(null=True, blank=True)  # Description of the item
    price = models.DecimalField(max_digits=5, decimal_places=2, default=1)  # Price of the item
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True)  # Foreign key to Category
    available = models.BooleanField(default=False)  # Availability status
    image = models.ImageField(upload_to='images/', null=True, blank=True)  # Image upload field

    def __str__(self):
        # String representation of the model
        available_status = "Available" if self.available else "Not Available"
        image_status = self.image.url if self.image else "No Image"
        return f'{self.name} ==== {self.price} ===={image_status}==={available_status}=== {self.id}'
    
class Weekday(models.Model):
     id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)  # UUID as primary key
     name = models.CharField(max_length=100, null=True, blank=True)
     def __str__(self):
        return self.name

class WeeklyCalendar(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)  # UUID as primary key
    day_mon = models.ForeignKey(Weekday, related_name='monday', on_delete=models.SET_NULL, null=True, blank=True)
    day_tue = models.ForeignKey(Weekday, related_name='tuesday', on_delete=models.SET_NULL, null=True, blank=True)
    day_wed = models.ForeignKey(Weekday, related_name='wednesday', on_delete=models.SET_NULL, null=True, blank=True)
    day_thu = models.ForeignKey(Weekday, related_name='thursday', on_delete=models.SET_NULL, null=True, blank=True)
    day_fri = models.ForeignKey(Weekday, related_name='friday', on_delete=models.SET_NULL, null=True, blank=True)
    day_sat = models.ForeignKey(Weekday, related_name='saturday', on_delete=models.SET_NULL, null=True, blank=True)
    day_sun = models.ForeignKey(Weekday, related_name='sunday', on_delete=models.SET_NULL, null=True, blank=True)
    
# Table model stores information about tables in a restaurant like number, capacity, etc.
class Table(models.Model):
# UUID field as primary key for each table, auto-generated
    id = models.UUIDField(primary_key = True, default = uuid.uuid4,editable = False)
    number=models.IntegerField(default=1) # Integer field to store table number, default is 1
    capacity=models.IntegerField(default=1) # Integer field to store the capacity of the table, default is 1
    is_occupied=models.BooleanField(default=False) # Boolean field to check if the table is occupied, default is False

    def __str__(self): # String representation of the model
        if self.is_occupied: # Checks if the table is occupied
            is_occupied_status="yes"
        else:   
            is_occupied_status="no"
            
    # Returns the table number, capacity, occupancy status, and id of the table
        return f"Table: {self.number}===Capacity: {self.capacity}==={is_occupied_status}====id:{self.id}"



